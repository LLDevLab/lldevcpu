// Sending data from "i2c data input/output register" to slave device
i2c_send_data:
push r0
// Clear bit 8 (Data send bit) in i2c control resister
ldi r0, i2c_get_ctrl_reg_val
call r0
push r1
mov r1, r0
ldi r0, #0xfeff
and r0, r1
push r0
ldi r0, i2c_set_ctrl_reg_val
call r0
pop r0
// Set bit 8 (Data send bit) in i2c control resister
ldi r0, #0x100
or r0, r1
push r0
ldi r0, i2c_set_ctrl_reg_val
call r0
pop r0
// Waiting while data transferring is complete
pop r1
ldi r0, i2c_wait
call r0
// Restore the stack and return from function
pop r0
ret

// Sending start or rstart signal to i2c bus
i2c_send_start_signal:
// Clearing "Start send" bit (bit 10) in i2c control register
push r0
ldi r0, i2c_get_ctrl_reg_val
call r0
push r1
mov r1, r0
ldi r0, #0xfbff
and r0, r1
push r0
ldi r0, i2c_set_ctrl_reg_val
call r0
pop r0
// Setting "Start send" bit (bit 10) in i2c control register
mov r1, r0
ldi r0, #0x400
or r0, r1
push r0
ldi r0, i2c_set_ctrl_reg_val
call r0
pop r0
// Waiting while bus will be ready
ldi r0, i2c_wait
call r0
// Restore the stack and return from function
pop r1
pop r0
ret

// Sending stop signal to i2c bus
i2c_send_stop_signal:
push r0
push r1
push r2
ldi r0, i2c_get_ctrl_reg_val
call r0
// Now clrt reg value is in r0 register
// If 9th bit is set, clear it
ldi r1, #0x200
mov r2, r0
and r2, r1
cmp r2, r1
ldi r2, i2c_send_stop_signal_set_stop_bit
breq r2
// Otherwise clear 9th bit first
ldi r1, #0xfdff
and r0, r1
push r0
ldi r1, i2c_set_ctrl_reg_val
call r1
pop r0
i2c_send_stop_signal_set_stop_bit:
// Set 9th bit of ctrl reg
ldi r1, #0x200
or r0, r1
push r0
ldi r1, i2c_set_ctrl_reg_val
call r1
pop r0
// Clear 9th bit once more (just in case)
ldi r1, #0xfdff
and r0, r1
push r0
ldi r1, i2c_set_ctrl_reg_val
call r1
pop r0
// Return from function
pop r2
pop r1
pop r0
ret

// Set bit 15 of i2c control register
i2c_enable:
push r0
ldi r0, i2c_get_ctrl_reg_val
call r0
push r1
ldi r1, #0x8000
or r0, r1
push r0
ldi r1, i2c_set_ctrl_reg_val
call r1
pop r0
pop r1
pop r0
ret

// Waiting until I2C bus will be ready to use
i2c_wait:
// Get i2c status register's value
push r0
ldi r0, i2c_get_status_reg_val
call r0
push r1
mov r1, r0
// Looping while bit 15 (i2c bus status) equal to 0
ldi r0, #0x8000
and r1, r0
cmp r0, r1
pop r1
pop r0
ldi r0, i2c_wait
brne r0
ret

// Set a value to I2C Control Register
// Arguments:
// 	- A value to set
i2c_set_ctrl_reg_val:
push r12
mov r12, r14
push r0
ldi r0, i2c_get_ctrl_reg_addr
call r0
push r1
mov r1, r0
// Get parameter from the stack
push r2
// Set map of RAM addresses
ldi r0, #2
lsh r0, #28
// Or'ing stack frame with the map
or r0, r12
// Parameter will have an offset r12 + 3
ldi r2, #3
add r2, r0
// Load parameter's value to r0 register
ld r0, r2
// Store new value to i2c control register
st r1, r0
pop r2
pop r1
// r0 were not popped after i2c_get_addr_reg_addr function call
pop r0
pop r12
ret

// Set data to I2C data register
// Arguments:
//	- The only argument is a data to save
i2c_set_data:
push r12
mov r12, r14
push r0
ldi r0, i2c_get_data_reg_addr
call r0
push r1
mov r1, r0
// Get parameter from the stack
push r2
// Set map of RAM addresses
ldi r0, #2
lsh r0, #28
// Or'ing stack frame with the map
or r0, r12
// Parameter will have an offset r12 + 3
ldi r2, #3
add r0, r2
// Load parameter's value to r2 register
ld r2, r0
// Store data to the register
st r1, r2
pop r2
pop r1
// r0 were not popped after i2c_get_addr_reg_addr function call
pop r0
pop r12
ret

// Returns I2C Control Register's value
i2c_get_ctrl_reg_val:
ldi r0, i2c_get_ctrl_reg_addr
call r0
// Load data from address stored in register r0 to register r0
ld r0, r0
ret

// Returns I2C Status Register's value
i2c_get_status_reg_val:
ldi r0, i2c_get_status_reg_addr
call r0
// Load data from address stored in register r0 to register r0
ld r0, r0
ret

// Return address of I2C Status register (through r0 register)
i2c_get_status_reg_addr:
push r1
ldi r1, #0x07
push r1
ldi r0, get_periph_addr
call r0
pop r1
pop r1
ret

// Return address of I2C Data register (through r0 register)
i2c_get_data_reg_addr:
push r1
ldi r1, #0x06
push r1
ldi r0, get_periph_addr
call r0
pop r1
pop r1
ret

// Return address of I2C Address register (through r0 register)
i2c_get_addr_reg_addr:
push r1
ldi r1, #0x05
push r1
ldi r0, get_periph_addr
call r0
pop r1
pop r1
ret

// Return address of I2C Control register (through r0 register)
i2c_get_ctrl_reg_addr:
push r1
ldi r1, #0x04
push r1
ldi r0, get_periph_addr
call r0
pop r1
pop r1
ret
