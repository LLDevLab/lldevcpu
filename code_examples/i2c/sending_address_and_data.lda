main:
// 100 - is an address of slave device
ldi r0, #100
ldi r1, set_i2c_addr
push r0
call r1
pop r0
// 15 - is a data to transfer
ldi r0, #15
ldi r1, set_i2c_data
push r0
call r1
pop r0
ldi r1, i2c_enable
call r1
ldi r1, i2c_start_transfer
call r1
main_loop:
ldi r1, i2c_wait
call r1
ldi r1, i2c_start_transfer
call r1
ldi r1, main_loop
br r1
ret

// Set bit 12 of i2c control register to 0 and back to 1
i2c_start_transfer:
push r12
mov r12, r14
push r0
push r1
ldi r1, get_ctrl_reg_val
call r1
// clearing bit 12 of i2c control register
ldi r1, #0xefff
and r1, r0
push r1
ldi r1, set_ctrl_reg_val
call r1
pop r1
// setting bit 12 of i2c control register
ldi r1, #0x1000
or r1, r0
push r1
ldi r1, set_ctrl_reg_val
call r1
pop r1
pop r1
pop r0
pop r12
ret

// Set bit 15 of i2c control register
i2c_enable:
push r12
mov r12, r14
push r0
ldi r0, get_ctrl_reg_val
call r0
push r1
ldi r1, #0x8000
or r0, r1
push r0
ldi r1, set_ctrl_reg_val
call r1
pop r0
pop r1
pop r0
pop r12
ret

// Waiting until I2C bus will be ready to use
i2c_wait:
push r12
mov r12, r14
push r0
push r1
// Checking 15'th and 14'th of i2c status register
ldi r1, #0xc000
i2c_wait_loop:
ldi r0, get_status_reg_val
call r0
// Clear all bits in r0 except 15 and 14
and r0, r1
cmp r0, r1
ldi r0, i2c_wait_loop
brne r0
pop r1
pop r0
pop r12
ret

// Set a value to I2C Control Register
// Arguments:
// 	- A value to set
set_ctrl_reg_val:
push r12
mov r12, r14
push r0
ldi r0, get_ctrl_reg_addr
call r0
push r1
mov r1, r0
// Get parameter from the stack
push r2
// Set map of RAM addresses
ldi r0, #2
lsh r0, #28
// Or'ing stack frame with the map
or r0, r12
// Parameter will have an offset r12 + 3
ldi r2, #3
add r2, r0
// Load parameter's value to r2 register
ld r0, r2
// Store new value to i2c control register
st r1, r0
pop r2
pop r1
// r0 were not popped after get_addr_reg_addr function call
pop r0
pop r12
ret

// Returns I2C Control Register's value
get_ctrl_reg_val:
push r12
mov r12, r14
ldi r0, get_ctrl_reg_addr
call r0
// Load data from address stored in register r0 to register r0
ld r0, r0
pop r12
ret

// Returns I2C Status Register's value
get_status_reg_val:
push r12
mov r12, r14
ldi r0, get_status_reg_addr
call r0
// Load data from address stored in register r0 to register r0
ld r0, r0
pop r12
ret

// Returns an address of peripherial's register
// Arguments:
// 	- An offset
get_periph_addr:
push r12
// Create the stack frame
// Move current SP value to r12 register
mov r12, r14
// Get parameter from the stack
push r2
// Set map of RAM addresses
ldi r0, #2
lsh r0, #28
// Or'ing stack frame with the map
or r0, r12
// Parameter will have an offset r12 + 3
ldi r2, #3
add r0, r2
// Load parameter's value to r2 register
ld r2, r0
// Set map of Peripherials
ldi r0, #0x300000
lsh r0, #8
// Add offset to peripherials address
or r0, r2
// Exit from function
pop r2
pop r12
ret

// Return address of I2C Control register (through r0 register)
get_ctrl_reg_addr:
push r1
ldi r1, #0x04
push r1
ldi r0, get_periph_addr
call r0
pop r1
pop r1
ret

// Return address of I2C Address register (through r0 register)
get_addr_reg_addr:
push r1
ldi r1, #0x05
push r1
ldi r0, get_periph_addr
call r0
pop r1
pop r1
ret

// Return address of I2C Data register (through r0 register)
get_data_reg_addr:
push r1
ldi r1, #0x06
push r1
ldi r0, get_periph_addr
call r0
pop r1
pop r1
ret

// Return address of I2C Status register (through r0 register)
get_status_reg_addr:
push r1
ldi r1, #0x07
push r1
ldi r0, get_periph_addr
call r0
pop r1
pop r1
ret

// Set data to I2C data register
// Arguments:
//	- The only argument is a data to save
set_i2c_data:
push r12
mov r12, r14
push r0
ldi r0, get_data_reg_addr
call r0
push r1
mov r1, r0
// Get parameter from the stack
push r2
// Set map of RAM addresses
ldi r0, #2
lsh r0, #28
// Or'ing stack frame with the map
or r0, r12
// Parameter will have an offset r12 + 3
ldi r2, #3
add r0, r2
// Load parameter's value to r2 register
ld r2, r0
// Store data to the register
st r1, r2
pop r2
pop r1
// r0 were not popped after get_addr_reg_addr function call
pop r0
pop r12
ret

// Set address of the slave device to I2C address register
// Arguments:
//	- The only argument is an address of slave device
set_i2c_addr:
push r12
// Create the stack frame
// Move current SP value to r12 register
mov r12, r14
push r0
ldi r0, get_addr_reg_addr
call r0
push r1
mov r1, r0
// Get parameter from the stack
push r2
// Set map of RAM addresses
ldi r0, #2
lsh r0, #28
// Or'ing stack frame with the map
or r0, r12
// Parameter will have an offset r12 + 3
ldi r2, #3
add r0, r2
// Load parameter's value to r2 register
ld r2, r0
// Store address to the register
st r1, r2
pop r2
pop r1
// r0 were not popped after get_addr_reg_addr function call
pop r0
pop r12
ret
